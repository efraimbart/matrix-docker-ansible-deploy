# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: {{ matrix_mautrix_amp_homeserver_address }}
    # The domain of the homeserver (for MXIDs, etc).
    domain: {{ matrix_mautrix_amp_homeserver_domain }}
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true

# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: {{ matrix_mautrix_amp_appservice_address }}
    # When using https:// the TLS certificate and key files for the address.
    tls_cert: false
    tls_key: false

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29394
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. Only Postgres is currently supported.
    database: {{ matrix_mautrix_amp_database_connection_string }}

    # Provisioning API part of the web server for automated portal creation and fetching information.
    # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
    provisioning:
        # Whether or not the provisioning API should be enabled.
        enabled: true
        # The prefix to use in the provisioning API endpoints.
        prefix: /_matrix/provision/v1
        # The shared secret to authorize users of the API.
        # Set to "generate" to generate and save a new token.
        shared_secret: generate

    # The unique ID of this appservice.
    id: amp
    # Username of the appservice bot.
    bot_username: {{ matrix_mautrix_amp_appservice_bot_username|to_json }}
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: Android Messages bridge bot
    bot_avatar: mxc://maunium.net/VuvevQiMRlOxuBVMBNEZZrxi

    # Community ID for bridged users (changes registration file) and rooms.
    # Must be created manually.
    #
    # Example: "+amp:example.com". Set to false to disable.
    community_id: false

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: "{{ matrix_mautrix_amp_appservice_token }}"
    hs_token: "{{ matrix_mautrix_amp_homeserver_token }}"

# Prometheus telemetry config. Requires prometheus-client to be installed.
metrics:
    enabled: false
    listen_port: 8000

# Bridge config
bridge:
    # Localpart template of MXIDs for remote users.
    # {userid} is replaced with the user ID (phone or name converted into a mxid-friendly format).
    username_template: "amp_{userid}"
    # Displayname template for remote users.
    # {displayname} is replaced with the display name of the user.
    # {phone} is replaced with the phone number or name of the user.
    displayname_template: "{displayname} (SMS)"

    # Maximum length of displayname
    displayname_max_length: 100

    # Number of conversations to sync (and create portals for) on login.
    # Set 0 to disable automatic syncing.
    initial_conversation_sync: 10
    # Shared secret for https://github.com/devture/matrix-synapse-shared-secret-auth
    #
    # If set, custom puppets will be enabled automatically for local users
    # instead of users having to find an access token and run `login-matrix`
    # manually.
    login_shared_secret: null
    # Whether or not created rooms should have federation enabled.
    # If false, created portal rooms will never be federated.
    federate_rooms: true
    # Settings for backfilling messages from the Messages app.
    backfill:
        # If using double puppeting, should notifications be disabled
        # while the initial backfill is in progress?
        disable_notifications: false
    # End-to-bridge encryption support options. These require matrix-nio to be installed with pip
    # and login_shared_secret to be configured in order to get a device for the bridge bot.
    #
    # Additionally, https://github.com/matrix-org/synapse/pull/5758 is required if using a normal
    # application service.
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: false
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: false
        # Options for automatic key sharing.
        key_sharing:
            # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
            # You must use a client that supports requesting keys from other users to use this feature.
            allow: false
            # Require the requesting device to have a valid cross-signing signature?
            # This doesn't require that the bridge has verified the device, only that the user has verified it.
            # Not yet implemented.
            require_cross_signing: false
            # Require devices to be verified by the bridge?
            # Verification by the bridge is not yet implemented.
            require_verification: true
    # Whether or not to explicitly set the avatar and room name for private
    # chat portal rooms. This will be implicitly enabled if encryption.default is true.
    private_chat_portal_meta: false
    # Whether or not the bridge should send a read receipt from the bridge bot when a message has
    # been sent.
    delivery_receipts: false
    # Whether or not delivery errors should be reported as messages in the Matrix room.
    delivery_error_reports: false
    # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
    # This field will automatically be changed back to false after it,
    # except if the config file is not writable.
    resend_bridge_info: false

    # The prefix for commands. Only required in non-management rooms.
    command_prefix: "!am"

    # This bridge only supports a single user
    user: "{{ matrix_mautrix_amp_bridge_user }}"

puppeteer:
    connection:
        # Either unix or tcp
        type: unix
        # Only for type: unix
        path: /puppeteer/puppet.sock
        # Only for type: tcp
        host: localhost
        port: 29395

# Python logging configuration.
#
# See section 16.7.2 of the Python documentation for more info:
# https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
logging:
    version: 1
    formatters:
        colored:
            (): mautrix_amp.util.ColorFormatter
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
    handlers:
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: {{ matrix_mautrix_amp_log_level }}
        aiohttp:
            level: INFO
    root:
        level: {{ matrix_mautrix_amp_log_level }}
        handlers: [console]
